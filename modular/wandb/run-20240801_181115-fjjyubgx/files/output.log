

 50%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                              | 1/2 [02:22<02:22, 142.21s/it]
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [04:49<00:00, 144.94s/it]
  0%|                                                                                                                                                                                                                                                                                                                                     | 0/2 [00:00<?, ?it/s]

 50%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                              | 1/2 [02:05<02:05, 125.53s/it]
 50%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                              | 1/2 [03:01<03:01, 181.86s/it]
Traceback (most recent call last):
  File "/home/user/NgoQuang/truck_classification/modular/draw_graph.py", line 22, in <module>
    results = train_model()
              ^^^^^^^^^^^^^
  File "/home/user/NgoQuang/truck_classification/modular/train.py", line 81, in train_model
    # Start training with help from engine.py
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/NgoQuang/truck_classification/modular/engine.py", line 163, in train
    train_loss, train_acc = train_step(model=model,
                            ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/NgoQuang/truck_classification/modular/engine.py", line 37, in train_step
    for batch, (X, y) in enumerate(dataloader):
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torch/utils/data/dataloader.py", line 631, in __next__
    data = self._next_data()
           ^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torch/utils/data/dataloader.py", line 675, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torch/utils/data/_utils/fetch.py", line 49, in fetch
    data = self.dataset.__getitems__(possibly_batched_index)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torch/utils/data/dataset.py", line 419, in __getitems__
    return [self.dataset[self.indices[idx]] for idx in indices]
            ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "/home/user/NgoQuang/truck_classification/modular/data_setup.py", line 30, in __getitem__
    image = self.transform(image)
            ^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torchvision/transforms/transforms.py", line 95, in __call__
    img = t(img)
          ^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torchvision/transforms/transforms.py", line 277, in forward
    return F.normalize(tensor, self.mean, self.std, self.inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torchvision/transforms/functional.py", line 350, in normalize
    return F_t.normalize(tensor, mean=mean, std=std, inplace=inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/anaconda3/envs/ngokuang/lib/python3.12/site-packages/torchvision/transforms/_functional_tensor.py", line 926, in normalize
    return tensor.sub_(mean).div_(std)
           ^^^^^^^^^^^^^^^^^
KeyboardInterrupt